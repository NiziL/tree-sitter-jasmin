==========
Array init
==========

fn test_function() {
  ArrayInit(x);
}

---

(source_file
 (function_definition
  (identifier)
  (function_body
   (array_init (variable)))))

==========
Assignment
==========

fn test_function() {
  a.[#unaligned :u32 12:3] +16u= 2 if true;
  x = [(64u)(in1 + 8*i)];
}

---

(source_file
 (function_definition
  (identifier)
  (function_body
    (assign
     (lvalues 
      (index_expr
       (variable)
       (alignment)
       (access_type (utype))
       (int_literal)
       (int_literal)))
     (operator (castop (swsize)))
     (int_literal)
     (true))
    (assign
     (lvalues (variable))
     (operator)
     (mem_access
      (cast_expr
        (swsize)
        (parens_expr
          (bin_expr
           (variable)
           (operator)
           (bin_expr
            (int_literal)
            (operator)
            (variable))))))))))

============
If statement
============

fn test_function() {
  if false {
    _ = 1;
  } else if true {
    _ = 2;
  } else {
    _ = 3;
  }
}

---

(source_file
 (function_definition
  (identifier)
  (function_body
    (if_statement
     (false)
     (block
       (assign
        (lvalues (ignore))
        (operator)
        (int_literal)))
     (if_statement
      (true)
      (block
        (assign
         (lvalues (ignore))
         (operator)
         (int_literal)))
      (block
        (assign
         (lvalues (ignore))
         (operator)
         (int_literal))))))))

=========
For loops
=========

fn test_function() {
  for a = 1 to 2 {
    b = 2;
  }
}

---

(source_file
 (function_definition
  (identifier)
  (function_body
    (for_loop
     (variable)
     (int_literal)
     (int_literal)
     (block
      (assign
       (lvalues (variable))
       (operator)
       (int_literal)))))))

===========
While loops
===========

fn test_function() {
  while (x <= 3) {
    b += (int)x;
  }
}

---

(source_file
 (function_definition
  (identifier)
  (function_body
    (while_loop
     (bin_expr
      (variable)
      (operator)
      (int_literal))
     (block
      (assign
       (lvalues (variable))
       (operator)
       (cast_expr
        (int_type)
        (variable))))))))

=====================
Variable declarations
=====================

fn test_function() {
  reg bool a b = true;
}

---

(source_file
 (function_definition
  (identifier)
  (function_body
   (var_decl
    (storage) (bool_type)
    (variable)
    (variable) (true)))))
